# -*- coding: utf-8 -*-
"""Othello_basic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Faw0tCt54ftwD86yEoQyTON5dGhIM4jh
"""

#!/usr/bin/env python
# -*- coding: utf-8 -*-

from itertools import product
import numpy as np
from struct import *

def initialize():
    board = np.zeros((8,8))
    board[3][3] = 1
    board[3][4] = -1
    board[4][3] = -1
    board[4][4] = 1
    return board

def initialize_game():
    new_game = initialize()
    first_player = -1
    no_history = [56,56,56,56]
    return new_game, first_player, no_history

def unpack_movelist(match):
    match_movelist = match[8:]
    return unpack('b'*60, match_movelist)

def make_move(board, move, player, debug=False):
    if debug:
        if (len(find_legal_moves(board,player))) < 1:
            print("Illegal move!")
            print(board)
            print(move)
            print(player)
    private_board = np.array(board)
    move = str(move)
    row = int(move[0])-1
    column = int(move[1])-1
    private_board = do_takeovers(private_board, row, column, player)[0]
    return private_board

def update_states(player, board, move, previous_moves):
    if player is 1:
        player = -1
    else:
        player = 1
    legal_moves = find_legal_moves(board, player)
    if len(legal_moves) == 0:
        if player is 1:
            player = -1
        else:
            player = 1
    previous_moves[3] = previous_moves[2]
    previous_moves[2] = previous_moves[1]
    previous_moves[1] = previous_moves[0]
    previous_moves[0] = move
    
    return player, legal_moves, previous_moves

def flip_right(board, row, column, player):
  i = column
  while True:
    if i is 7:
      return False, board
    i += 1
    if board[row][i] == 0:
      return False, board
    if board[row][i] == player:
      for j in range(column, i):
        board[row][i] = player
      return True, board

def flip_left(board, row, column, player):
  i = column
  while True:
    if i is 0:
      return False, board
    i -= 1
    if board[row][i] == 0:
      return False, board
    if board[row][i] == player:
      for j in range(i, column):
        board[row][j] = player
      return True, board

def flip_up(board, row, column, player):
  i = row
  while True:
    if i is 0:
      return False, board
    i -= 1
    if board[i][column] == 0:
      return False, board
    if board[i][column] == player:
      for j in range(i, row):
        board[j][column] = player
      return True, board

def flip_down(board, row, column, player):
  i = row
  while True:
    if i is 7:
      return False, board
    i += 1 
    if board[i][column] == 0:
      return False, board
    if board[i][column] == player:
      for j in range(row, i):
        board[j][column] = player
      return True, board

def flip_down_right(board, row, column, player):
  i = row
  k = column
  while True:
    if i is 7 or k is 7:
      return False, board
    i += 1
    k += 1
    if board[i][k] == 0:
      return False, board
    if board[i][k] == player:
      h = column
      for j in range(row, i):
        board[j][h] = player
        h = h+1
      return True, board

def flip_up_right(board, row, column, player):
  i = row
  k = column
  while True:
    if i is 0 or k is 7:
      return False, board
    i -= 1
    k += 1
    if board[i][k] == 0:
      return False, board
    if board[i][k] == player:
      h = k
      for j in range(i, row):
        board[j][h] = player
        h = h-1
      return True, board

def flip_down_left(board, row, column, player):
  i = row
  k = column
  while True:
    if i is 7 or k is 0:
      return False, board
    i += 1
    k -= 1
    if board[i][k] == 0:
      return False, board
    if board[i][k] == player:
      h = column
      for j in range(row, i):
        board[j][h] = player
        h = h-1
      return True, board

def flip_up_left(board, row, column, player):
  i = row
  k = column
  while True:
    if i is 0 or k is 0:
      return False, board
    i -= 1
    k -= 1
    if board[i][k] == 0:
      return False, board
    if board[i][k] == player:
      h = k
      for j in range(i, row):
        board[j][h] = player
        h = h+1
      return True, board

def find_winner(board, black, white):
    if points(board, black) > points(board, white):
        return black
    elif points(board, black) < points(board, white):
        return white
    else:
        return False

def points(board, player):
  return np.count_nonzero(board == player)

def find_legal_moves(board, player):
  legal_moves = []
  for i in range(0,8):
    for j in range(0,8):
      if is_legal(board, i, j, player):
        legal_moves.append((i+1)*10 + (j+1))

def do_takeovers(board, row, column, player):
  (down, board) = flip_down(board, row, column, player)
  (up, board) = flip_up(board, row, column, player)
  (left, board) = flip_left(board, row, column, player)
  (right, board) = flip_right(board, row, column, player)
  (down_right, board) = flip_down_right(board, row, column, player)
  (down_left, board) = flip_down_left(board, row, column, player)
  (up_right, board) = flip_up_right(board, row, column, player)
  (up_left, board) = flip_up_left(board, row, column, player)

def is_legal(board, row, column, player):
  if board[row][column] != 0:
    return False
  temp_board = np.array(board)
  temp_board[row][column] = player
  (temp_board, down, left, up, right, down_right, down_left, up_right, up_left) = do_takeovers(temp_board, row, column, player)
  if down:
    if board[row+1][column] != player:
      return True
  if up:
    if board[row-1][column] != player:
      return True
  if left:  
    if board[row][column-1] != player:
      return True
  if right:
    if board[row][column+1] != player:
      return True
  if down_left:
    if board[row+1][column-1] != player:
      return True
  if up_right:
    if board[row-1][column+1] != player:
      return True
  if up_left:
    if board[row-1][column-1] != player:
      return True
  return False